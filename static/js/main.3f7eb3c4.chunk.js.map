{"version":3,"sources":["theme/material.theme.js","store/api.js","utils/utils.js","utils/history.js","components/Todos/Models/Subtask.model.js","components/Todos/Models/Bucket.model.js","components/Todos/Models/BucketStore.model.js","store/MobxStore.api.js","store/MobxStore.js","components/Navbar.js","components/Messages.js","components/withStore.hoc.js","components/Add.js","components/Input.js","components/Todos/Accordion.js","components/Todos/BucketSubtasks.js","components/Todos/BucketTodo.js","pages/Home.js","App.js","index.js"],"names":["theme","createMuiTheme","palette","primary","main","secondary","contrastThreshold","tonalOffset","background","paper","apiUrlBase","process","api","base","bucketList","purgeDatabase","createBucket","updateBucketStatus","id","updateBucketOnlyStatus","createSubtask","updateSubtaskStatus","todo_id","tasksComplete","tasks","filter","n","status","length","tasksPending","fetchHandler","response","a","ok","json","resp","toString","isObject","Promise","reject","error","message","updateTodoValues","todo","source","Object","entries","values","k","val","presetPost","data","method","headers","body","JSON","stringify","createBrowserHistory","basename","configure","enforceActions","Subtask","title","created_at","finished","makeObservable","this","observable","toggle","action","updateSubtask","warn","observe","change","newValue","log","task","copy","runInAction","Bucket","subtasks","reopenStatus","onUpdate","map","sort","b","Date","getTime","setSubTasksStatus","subTask","newSub","push","entity","eventName","delay","then","byStatus","undefined","BucketStore","todos","state","unfinishedCount","computed","finishedCount","addNewBucket","addNewSubTask","find","lazyCB","Error","bucket","v4","tempItem","initialID","isFunction","updatedBucket","forEach","inx","catch","onerror","err","subtask","updatedSubtask","freeze","MobXStore","todoData","fetch_bucketListGet","childStore","onDone","entities","doSwitch","ent","done","addBucket_and_fetch","fail","fetch_updateBucketStatusPost","r","_updateBucket","fetch_updateSubtaskStatusPost","_updateSubtask","bucketID","fetch_updateBucketOnlyStatus","addSubtask_and_fetch","pass","o","childStoresAvailable","bucketStore","promise","childstores","bucketItem","fetch_createBucketPost","bucketId","subtaskItem","fetch_createSubtaskPost","sq","debug","fetch","code","indexOf","_addSubToBucket","addSubtask","subTaskStore","useStyles","makeStyles","root","flexGrow","menuButton","marginRight","spacing","ButtonAppBar","mobxstore","React","useState","userName","setUser","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Chip","avatar","label","clickable","width","marginTop","Messages","props","type","value","Alert","severity","withStoreReady","Component","observer","to","CircularProgress","size","FloatingActionButtons","actionAdd","opts","margin","style","backgroundColor","extendedIcon","Fab","onClick","event","stopPropagation","preventDefault","BasicTextFields","add","text","variantName","inputName","setInputName","onChange","target","onSubmit","noValidate","autoComplete","Fragment","TextField","height","heading","fontSize","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","paddingTop","AccordionSection","SubTasks","Check","item","Accordion","AccordionSummary","expandIcon","aria-controls","FormControlLabel","onFocus","control","AccordionDetails","SubTaskView","currentCount","onCurrentCount","didLoad","setDidLoad","useEffect","labelId","ListItem","key","role","dense","button","e","ListItemIcon","Checkbox","checked","tabIndex","inputProps","ListItemText","SubTasksListView","List","padding","SubtaskComponent","SubTaskStore","BucketView","setCount","count","taskByID","BucketListView","deleted","setDelete","Box","textAlign","opacity","Button","disabled","window","location","reload","border","BucketComponent","resolve","storeOnUpdateHandler","BucketTodo","loggerSetting","App","ThemeProvider","Navbar","exact","path","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3f7eb3c4.chunk.js","sourcesContent":["\r\nimport { createMuiTheme } from '@material-ui/core/styles'\r\n\r\nexport const theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            // light: will be calculated from palette.primary.main,\r\n            main: '#00897b'\r\n            // dark: will be calculated from palette.primary.main,\r\n            // contrastText: will be calculated to contrast with palette.primary.main\r\n        },\r\n        secondary: {\r\n            main: '#c0ca33'\r\n            // dark: will be calculated from palette.secondary.main,\r\n            //  contrastText: '#ffcc00',\r\n        },\r\n        // Used by `getContrastText()` to maximize the contrast between\r\n        // the background and the text.\r\n        contrastThreshold: 3,\r\n        // Used by the functions below to shift a color's luminance by approximately\r\n        // two indexes within its tonal palette.\r\n        // E.g., shift from Red 500 to Red 300 or Red 700.\r\n        tonalOffset: 0.2,\r\n        background: {\r\n            paper: '#f4f4f4'\r\n        }\r\n    }\r\n})\r\n","/**\r\n * Refer to Bucket List server ./config.js file for details\r\n * REACT_APP_API_URL vars are set in `.env.{xxx} files\r\n */\r\n\r\nlet apiUrlBase = process.env.REACT_APP_API_URL\r\n\r\nif (!apiUrlBase) {\r\n    console.error('apiUrlBase is empty!')\r\n}\r\n// NOTE for this test we dont need auth Bearer since the production\r\n\r\nconst api = {\r\n    base: apiUrlBase,\r\n    bucketList: () => `${apiUrlBase}/list`, // GET\r\n    purgeDatabase: () => `${apiUrlBase}/cron/purge`, // GET\r\n    createBucket: () => `${apiUrlBase}/create`, // POST\r\n    updateBucketStatus: (id) => `${apiUrlBase}/${id}/update-status`, // POST\r\n    updateBucketOnlyStatus: (id) => `${apiUrlBase}/${id}/bucket-only-update-status`, // POST\r\n    createSubtask: (id) => `${apiUrlBase}/${id}/rel/subtask/create`, // POST\r\n    updateSubtaskStatus: (todo_id) => `${apiUrlBase}/rel/subtask/${todo_id}/update-status` // POST\r\n}\r\n\r\nexport { api } // >> Object.freeze(api)\r\n","\r\nimport { warn, isObject, debug } from 'x-utils-es'\r\nimport { api } from 'src/store/api'\r\n/**\r\n * \r\n * @param {*} status match available status types \r\n */\r\nexport const statusTypes = (status) => {\r\n    const o = {\r\n        pending: 0,\r\n        completed: 1\r\n    }\r\n    if (o[status] === undefined) warn('[statusTypes]', `invalid status: ${status} provided`)\r\n    return o[status]\r\n}\r\n\r\nexport const tasksComplete = (tasks = []) => {\r\n    return tasks.filter(n => n.status === 'completed').length === tasks.length && tasks.length > 0\r\n}\r\n\r\nexport const tasksPending = (tasks = []) => {\r\n    return tasks.filter(n => n.status === 'pending').length === tasks.length && tasks.length > 0\r\n}\r\n\r\n/**\r\n * fetch handler if status error reject response\r\n * @param {*} response \r\n */\r\nexport const fetchHandler = async (response) => { \r\n    if (response.ok) return response.json()\r\n    else {\r\n\r\n        let resp\r\n        try {\r\n            resp = await response.json() // {message,code,error}   \r\n        } catch (err) {\r\n          \r\n            resp = err.toString()\r\n        }\r\n        // if our server is up we know what to expect, else can return empty string\r\n        if (isObject(resp)) {\r\n            return Promise.reject(resp.error || resp.message)\r\n        } else Promise.reject(resp || \"HTTP-Error: \" + resp.status)\r\n    }\r\n}\r\n\r\n/**\r\n * Update original with new data\r\n * @param {*} todo data to update with\r\n * @param {*} source original \r\n * @returns `original` modified\r\n */\r\nexport const updateTodoValues = (todo = {}, source) => {\r\n\r\n    for (let [k, val] of Object.entries(todo).values()) {\r\n        if (source[k]) source[k] = val\r\n    }\r\n    return source\r\n}\r\n\r\n/**\r\n * Preset post headers\r\n * @param {*} data \r\n */\r\nexport const presetPost = (data) => {\r\n    return {\r\n        method: 'POST',\r\n        headers: {\r\n            ...(process.env.REACT_APP_FUNCTION_CODE ? { 'Function-Code': process.env.REACT_APP_FUNCTION_CODE } : {}),\r\n            'Content-Type': 'application/json;charset=utf-8'\r\n        },\r\n        body: JSON.stringify(data)\r\n    }\r\n}\r\n\r\nexport const purgeDatabase = () => {\r\n    debug('[fetch]', api.purgeDatabase())\r\n    return fetch(api.purgeDatabase(), {\r\n        method: 'GET',\r\n        headers: { \r\n            ...(process.env.REACT_APP_FUNCTION_CODE ? { 'Function-Code': process.env.REACT_APP_FUNCTION_CODE } : {}),\r\n            'Content-Type': 'application/json;charset=utf-8'\r\n        }\r\n    })\r\n}\r\n","import { createBrowserHistory } from 'history'\r\n\r\nexport const history = createBrowserHistory({\r\n    basename: process.env.PUBLIC_URL\r\n})\r\n","import { makeObservable, observable, action, observe, runInAction, configure } from \"mobx\"\r\nimport { log, copy, warn } from 'x-utils-es'\r\n\r\nconfigure({\r\n    enforceActions: \"never\"\r\n    // computedRequiresReaction: true,\r\n    // reactionRequiresObservable: true,\r\n    // observableRequiresReaction: true,\r\n    // disableErrorBoundaries: true,\r\n})\r\n\r\nexport class Subtask {\r\n    // initial values\r\n\r\n    todo_id = ''\r\n    status = ''\r\n    title = ''\r\n    created_at = ''\r\n    finished = false\r\n    error = ''\r\n    constructor({ todo_id, title, status, created_at }) {\r\n\r\n        makeObservable(this, {\r\n            todo_id: observable,\r\n            status: observable,\r\n            title: observable,\r\n            // created_at: observable,\r\n            error: observable,\r\n            finished: observable,\r\n            toggle: action,\r\n            updateSubtask: action\r\n        })\r\n\r\n        if (!title || !todo_id || !status || !created_at) {\r\n            this.error = 'new Subtask missing some props'\r\n            warn('[Subtask]', this.error)\r\n\r\n        } else {\r\n\r\n            this.error = ''\r\n            this.todo_id = todo_id\r\n            this.title = title\r\n            this.status = status\r\n            this.created_at = created_at\r\n        }\r\n\r\n        // initial cleanup\r\n        if (this.status === 'completed') {\r\n            this.finished = true\r\n        }\r\n\r\n        observe(this, 'status', change => {\r\n\r\n            if (change.newValue === 'completed') {\r\n                this.finished = true\r\n            }\r\n            log('[subtask]', `is ${change.newValue}`)\r\n        })\r\n    }\r\n\r\n    toggle() {\r\n     \r\n        this.finished = !this.finished\r\n        this.status = this.finished ? 'completed' : 'pending'\r\n    }\r\n      \r\n    updateSubtask(task = {}) {\r\n        task = copy(task)\r\n        runInAction(() => {\r\n            if (task.title) this.title = task.title\r\n            if (task.created_at) this.created_at = task.created_at\r\n            if (task.status) this.status = task.status\r\n        })\r\n    }\r\n}\r\n","import { makeObservable, observable, action, observe, runInAction, configure } from \"mobx\"\r\nimport { log, copy, warn, delay } from 'x-utils-es'\r\nimport { tasksComplete, tasksPending } from '../../../utils'\r\nimport { Subtask } from './Subtask.model'\r\n\r\nconfigure({\r\n    enforceActions: \"never\"\r\n    // computedRequiresReaction: true,\r\n    // reactionRequiresObservable: true,\r\n    // observableRequiresReaction: true,\r\n    // disableErrorBoundaries: true,\r\n})\r\n\r\nexport class Bucket {\r\n    // initial values\r\n    id = ''\r\n    status = ''\r\n    title = ''\r\n    created_at = ''\r\n    subtasks = []\r\n    finished = false\r\n    error = ''\r\n    reopenStatus = false // if the bucket was closed and we added another subtask\r\n\r\n    // dataState = 'pending' // [pending,ready,error]\r\n    constructor({ id, title, status, created_at, subtasks }) {\r\n\r\n        makeObservable(this, {\r\n            id: observable,\r\n            status: observable,\r\n            title: observable,\r\n            //  created_at: observable,\r\n            subtasks: observable,\r\n            error: observable,\r\n            finished: observable,\r\n            toggle: action,\r\n            onUpdate: action,\r\n            reopenStatus: observable\r\n        })\r\n\r\n        if (!title || !id || !status || !created_at) {\r\n            this.error = 'new Bucket missing some props'\r\n            warn('[Bucket]', this.error)\r\n\r\n        } else {\r\n\r\n            this.error = ''\r\n            this.id = id\r\n            this.title = title\r\n            this.status = status\r\n            this.created_at = created_at\r\n            this.subtasks = (subtasks || []).length ? copy(subtasks).map(n => new Subtask(n)) : []\r\n\r\n            // sort tasks \r\n            this.subtasks.sort((a, b) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime())\r\n\r\n        }\r\n        // initial cleanup\r\n        // if we got some completed buckets from db but have no subtask\r\n        if (this.status === 'completed') {\r\n            this.finished = true\r\n            this.reopenStatus = false\r\n        \r\n            // NOTE so we can check if real changes happened on database\r\n            // this.setSubTasksStatus('completed')\r\n        } \r\n\r\n        if (this.status === 'completed' && !this.subtasks.length) {\r\n            this.status = 'pending'\r\n            this.finished = false\r\n            this.reopenStatus = false\r\n        }\r\n\r\n        observe(this, 'status', change => {\r\n           \r\n            if (!this.reopenStatus) {\r\n                this.setSubTasksStatus(change.newValue)\r\n            }\r\n                \r\n        })\r\n\r\n        observe(this, 'subtasks', change => {\r\n\r\n            if (tasksComplete(change.newValue)) {\r\n\r\n                runInAction(() => {\r\n                    this.status = 'completed'\r\n                    this.finished = true\r\n                    log('[tasksCompleted]', 'bucket is complete')\r\n                })\r\n                return\r\n            }\r\n\r\n            if (tasksPending(change.newValue)) {\r\n\r\n                runInAction(() => {\r\n                    this.status = 'pending'\r\n                    this.finished = false\r\n                    log('[tasksPending]', 'bucket is pending')\r\n                })          \r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    toggle() {\r\n        // dont perform checks if not subs available\r\n        if (!this.subtasks.length) return\r\n        this.finished = !this.finished\r\n        this.status = this.finished ? 'completed' : 'pending'\r\n        return this.finished\r\n    }\r\n\r\n    addSubtask(subTask = []) {\r\n        subTask = copy(subTask)\r\n        runInAction(() => {\r\n            let newSub = new Subtask(subTask)\r\n            if (!newSub.error) {\r\n                this.subtasks.push(newSub)\r\n            } else warn('[addSubtask]', 'subtask not added')\r\n        })\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} task subtask model\r\n     * @param {*} entity  subtask\r\n     * @param {*} eventName event type\r\n     */\r\n    onUpdate(task, entity, eventName) {\r\n\r\n        if (eventName === 'addSubtask' && entity === 'subtask') {\r\n\r\n            // this.setSubTasksStatus(task.status, task.todo_id)\r\n            runInAction(() => {\r\n                if (this.status === 'completed') {\r\n                    this.reopenStatus = true\r\n                    delay(300).then(() => {\r\n                        this.finished = false   \r\n                        this.status = 'pending'                  \r\n                        this.reopenStatus = false\r\n                         \r\n                    })                             \r\n                }\r\n            })\r\n\r\n            return \r\n        }\r\n\r\n        if (eventName === 'statusChange' && entity === 'subtask') {\r\n           \r\n            runInAction(() => {\r\n               \r\n                this.setSubTasksStatus(task.status, task.todo_id)\r\n\r\n                if (this.status === 'completed' && !tasksComplete(this.subtasks)) {\r\n                    this.reopenStatus = true\r\n                    this.status = 'pending'\r\n                    this.finished = false\r\n                    this.reopenStatus = false\r\n                    return \r\n                }\r\n\r\n                if (tasksComplete(this.subtasks)) {\r\n                    this.status = 'completed'\r\n                    this.finished = true\r\n                }\r\n\r\n                if (tasksPending(this.subtasks)) {\r\n                    this.status = 'pending'\r\n                    this.finished = false\r\n                }\r\n\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * update status of all subtasks \r\n     * if id is set only that subtask is updated\r\n     * @param {*} byStatus \r\n     * @param {*} todo_id (optional)\r\n     */\r\n    setSubTasksStatus(byStatus, todo_id) {\r\n        if (byStatus === 'completed' || byStatus === 'pending') {\r\n            runInAction(() => {\r\n                this.subtasks = this.subtasks\r\n                    .map(n => {\r\n                        if (todo_id === undefined) {\r\n       \r\n                            n.status = byStatus\r\n                            n.finished = byStatus === 'completed'\r\n                            return n\r\n                        } else {\r\n                            if (todo_id === n.todo_id) {\r\n                                n.status = byStatus\r\n                                n.finished = byStatus === 'completed'\r\n                            }\r\n                            return n\r\n                        }\r\n                    })\r\n            })\r\n        }\r\n    }\r\n}\r\n","import { makeObservable, observable, computed, action, observe, runInAction, configure } from \"mobx\"\r\nimport { log, onerror, warn, isFunction } from 'x-utils-es'\r\nimport { updateTodoValues } from '../../../utils'\r\nimport { v4 } from 'uuid'\r\nimport { Bucket } from './Bucket.model'\r\nimport { Subtask } from './Subtask.model' \r\n\r\nconfigure({\r\n    enforceActions: \"never\"\r\n    // computedRequiresReaction: true,\r\n    // reactionRequiresObservable: true,\r\n    // observableRequiresReaction: true,\r\n    // disableErrorBoundaries: true,\r\n})\r\n\r\n/**\r\n * BucketStore class is also used as SubTaskStore class, that is why we use {entity} name\r\n */\r\nexport class BucketStore/** SubTaskStore */ {\r\n    todos = [];\r\n    state = \"pending\" // \"pending\", \"update\" \"ready\" or \"error\"\r\n\r\n    id = '' // NOTE id not available on entity BucketStore\r\n    get unfinishedCount() {\r\n        return this.todos.filter(todo => !todo.finished).length\r\n    }\r\n    get finishedCount() {\r\n        return this.todos.filter(todo => todo.finished).length\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} todos \r\n     * @param `{id, entity}` id is only available on entity='SubTaskStore'\r\n     */\r\n    constructor(todos, { id, entity }) {\r\n\r\n        makeObservable(this, {\r\n            id: observable,\r\n            state: observable,\r\n            todos: observable,\r\n            unfinishedCount: computed,\r\n            finishedCount: computed,\r\n            // onUpdate:action\r\n            addNewBucket: action,\r\n            addNewSubTask: action\r\n        })\r\n\r\n        this.entity = entity\r\n        this.id = id\r\n\r\n        if (this.entity === 'BucketStore') {\r\n            this.todos = todos.map(n => new Bucket(n)).filter(n => !n.error)\r\n            this.state = 'ready'\r\n        }\r\n\r\n        if (this.entity === 'SubTaskStore') {\r\n            this.todos = todos.map(n => new Subtask(n)).filter(n => !n.error)\r\n            this.state = 'ready'\r\n        }\r\n\r\n        observe(this, 'todos', change => {\r\n            log(`[${this.entity}][todos][updated]`)\r\n        })\r\n\r\n        observe(this, 'state', change => {\r\n            log(`[${this.entity}][state]`, change.newValue)\r\n        })\r\n\r\n        // log(`[entity: ${this.entity}] /todos`, this.todos)\r\n    }\r\n   \r\n    /**\r\n     * remove from database by api call\r\n     */\r\n    deleteExecCron() {\r\n\r\n    }\r\n\r\n    /**\r\n     * @memberof Subtask/Bucket\r\n     * grab either subtask or bucket by id\r\n     * @param {*} id\r\n     */\r\n    taskByID(id) {\r\n        if (this.entity === 'SubTaskStore') {\r\n            let task = this.todos.find(n => n.todo_id === id)\r\n            if (task instanceof Subtask) return task\r\n        }\r\n        if (this.entity === 'BucketStore') {\r\n            let task = this.todos.find(n => n.id === id)\r\n            if (task instanceof Bucket) return task\r\n        }\r\n        return undefined\r\n    }\r\n\r\n    /**\r\n     * add new bucket ahead of time then wait for server response to update again using lazy callback\r\n     * @returns number of added buckets \r\n     */\r\n    addNewBucket({ title }, lazyCB) {\r\n\r\n        if (this.entity !== 'BucketStore') {\r\n            throw new Error(`not allowed performing task/addNewBucket on entity:${this.entity}`)\r\n        }\r\n\r\n        try {\r\n\r\n            if (!title) {\r\n                warn('Bucket not added, {title} missing')\r\n                return \r\n            }\r\n\r\n            /**\r\n             * NOTE\r\n             * So we dont wait for return success callback from server\r\n             * We create initial item and then update its {id,created_at} with the official\r\n             */\r\n            const tempItem = ({ title }) => {\r\n                return {\r\n                    id: v4(), // updated by server \r\n                    title,\r\n                    status: 'pending', // [pending/completed]\r\n                    created_at: new Date(), // updated by server \r\n                    subtasks: []\r\n                }\r\n            }\r\n\r\n            let bucket = new Bucket(tempItem({ title }))\r\n            let initialID = bucket.id\r\n\r\n            runInAction(() => {\r\n                // add another bucket          \r\n                this.todos.push(bucket)\r\n                // this.state = 'ready'\r\n                // NOTE lazy callback from server \r\n                if (isFunction(lazyCB)) {\r\n                    lazyCB(bucket).then((updatedBucket) => {\r\n                        this.todos.forEach((todo, inx) => {\r\n                            if (todo.id === initialID) {\r\n                                todo = updateTodoValues(updatedBucket, todo)                              \r\n                                this.todos[inx] = todo \r\n                                log('[addNewBucket][lazyUpdate][done]')\r\n                            }\r\n                        })\r\n                    })\r\n                        // TODO Here we can reverse last add in case server/connection drops out \r\n                        .catch(onerror)\r\n                }\r\n            })\r\n\r\n            return bucket\r\n\r\n        } catch (err) {\r\n            onerror(err)\r\n        }\r\n\r\n        return undefined\r\n    }\r\n\r\n    /**\r\n     * add new subtask ahead of time then wait for server response to update again using lazy callback\r\n     * @returns number of added subTask \r\n     */\r\n    addNewSubTask({ title }, lazyCB) {\r\n\r\n        if (this.entity !== 'SubTaskStore') {\r\n            throw new Error(`not allowed performing task/addSubTask on entity:${this.entity}`)\r\n        }\r\n\r\n        try {\r\n\r\n            if (!title) {\r\n                warn('[addNewSubTask]', `subtask not added, {title} missing`)\r\n                return\r\n            }\r\n\r\n            /**\r\n            * \r\n            * So we dont wait for return success callback from server\r\n            * We create initial item and then update its {todo_id,created_at} with the official\r\n            */\r\n            const tempItem = ({ title }) => {\r\n                return {\r\n                    todo_id: v4(), // updated by server \r\n                    title,\r\n                    status: 'pending', // [pending/completed]\r\n                    created_at: new Date() // updated by server \r\n                }\r\n            }\r\n\r\n            let subtask = new Subtask(tempItem({ title }))\r\n            let initialID = subtask.todo_id\r\n            // add another subtask\r\n            runInAction(() => {\r\n\r\n                this.todos.push(subtask)\r\n\r\n                // this.state = 'ready'\r\n                // NOTE lazy callback from server \r\n                if (isFunction(lazyCB)) {\r\n\r\n                    lazyCB(subtask).then((updatedSubtask) => {\r\n                        this.todos.forEach(n => {\r\n                            if (n.todo_id === initialID) {\r\n                                n = updateTodoValues(updatedSubtask, n)\r\n                            }\r\n                        })\r\n                    })\r\n                        // TODO Here we can reverse last add in case server/connection drops out \r\n                        .catch(onerror)\r\n                }\r\n            })\r\n\r\n            return subtask\r\n\r\n        } catch (err) {\r\n            onerror('[addSubTask]', err)\r\n        }\r\n        return undefined\r\n\r\n    }\r\n\r\n}\r\n","import { observable, makeObservable, runInAction } from \"mobx\"\r\nimport { onerror, sq, debug } from 'x-utils-es/'\r\nimport { BucketStore, Bucket, Subtask } from '../components/Todos/Models'\r\nimport { fetchHandler, updateTodoValues, presetPost } from '../utils'\r\nimport { api } from './api'\r\nObject.freeze(api) // no mods please!\r\n\r\nexport default class MobXStoreAPI {\r\n\r\n    todoData = []\r\n    state = \"pending\" // \"pending\", \"ready\", \"error\", \"updating\", \"no_auth\"\r\n\r\n    childStoresAvailable = {\r\n        bucketStore: sq()\r\n    }\r\n\r\n    childstores = {\r\n        // these stores become available after rendering\r\n        bucketStore: null\r\n    }\r\n\r\n    constructor() {\r\n\r\n        makeObservable(this.childStoresAvailable, {\r\n            bucketStore: observable\r\n        })\r\n\r\n    }\r\n  \r\n    // async fetchTodo() {\r\n\r\n    //     this.todoData = []\r\n    //     this.state = \"pending\"\r\n    //     await delay(2000) // fake loading\r\n    //     import('./dummy.data').then(\r\n    //         action(\"fetchSuccess\", todos => {\r\n    //             this.todoData = todos.todoList\r\n    //             this.state = \"ready\"\r\n    //         }),\r\n    //         action(\"fetchError\", error => {\r\n    //             this.state = \"error\"\r\n    //         })\r\n    //     )\r\n    // }\r\n\r\n    /**\r\n     * fetch initial buckets from the server\r\n     */\r\n    fetch_bucketListGet() {\r\n\r\n        this.state = 'pending'\r\n        this.todoData = []\r\n        debug('[fetch]', api.bucketList())\r\n        return fetch(api.bucketList(), {\r\n            method: 'GET',\r\n            headers: { \r\n                ...(process.env.REACT_APP_FUNCTION_CODE ? { 'Function-Code': process.env.REACT_APP_FUNCTION_CODE } : {}),\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            }\r\n        }).then(fetchHandler)\r\n            .then(({ response, code }) => {\r\n                // NOTE prefer this approach, more readable \r\n                runInAction(() => {\r\n                    this.todoData = response || []\r\n\r\n                    this.todoData.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())\r\n                    this.state = \"ready\"\r\n                })\r\n            }).catch(err => {\r\n                \r\n                runInAction(() => {\r\n                    if (['NO_TOKEN', 'NOT_AUTHENTICATED'].indexOf(err) !== -1) {\r\n                        this.state = \"no_auth\"\r\n                    } else {\r\n                        this.state = \"error\"\r\n                    }            \r\n                })\r\n                onerror('[fetch_bucketListGet]', err)\r\n            })\r\n    }\r\n\r\n    /**\r\n     * Request to create new Bucket\r\n     * Add new bucket to todoData[]\r\n     * @param {*} {title}\r\n     * @memberof MobXStoreAPI\r\n     */\r\n    fetch_createBucketPost({ title }) {\r\n        // this.state = \"updating\"\r\n        debug('[fetch]', api.createBucket())\r\n        return fetch(api.createBucket(), presetPost({ title })).then(fetchHandler)\r\n            .then(({ response, code }) => {\r\n\r\n                runInAction(() => {\r\n                    this.todoData.push(response)\r\n                })\r\n\r\n                return response\r\n\r\n            }).catch(err => {\r\n\r\n                runInAction(() => {\r\n                    if (['NO_TOKEN', 'NOT_AUTHENTICATED'].indexOf(err) !== -1) {\r\n                        this.state = \"no_auth\"\r\n                    }         \r\n                })\r\n\r\n                onerror('[fetch_createBucketPost]', err)\r\n            })\r\n    }\r\n\r\n    /**\r\n    * Request to create new Subtask that belongs on current bucket\r\n    * @param {*} {title}\r\n    * @param {*} id bucket id\r\n    * @memberof MobXStoreAPI\r\n    */\r\n    fetch_createSubtaskPost({ title }, id) {\r\n\r\n        // this.state = \"updating\"\r\n        debug('[fetch]', api.createSubtask(id))\r\n        return fetch(api.createSubtask(id), presetPost({ title })).then(fetchHandler)\r\n            .then(({ response, code }) => {\r\n\r\n                runInAction(() => {\r\n\r\n                    this.todoData = (this.todoData || []).map(todo => {\r\n                        if (todo.id === id) todo = response\r\n                        return todo\r\n                    })\r\n                    this._addSubToBucket(response, id)\r\n                })\r\n\r\n                return response\r\n\r\n            }).catch(err => {\r\n               \r\n                runInAction(() => {\r\n                    if (['NO_TOKEN', 'NOT_AUTHENTICATED'].indexOf(err) !== -1) {\r\n                        this.state = \"no_auth\"\r\n                    }         \r\n                })\r\n                \r\n                onerror('[fetch_createSubtaskPost]', err)\r\n            })\r\n    }\r\n\r\n    /**\r\n    * fetch update, and reset todoData\r\n    * @param {*} {title}\r\n    * @param {*} id bucket id\r\n    * @memberof MobXStoreAPI\r\n    */\r\n    fetch_updateBucketStatusPost({ status }, id) {\r\n\r\n        debug('[fetch]', api.updateBucketStatus(id))\r\n        return fetch(api.updateBucketStatus(id), presetPost({ status })).then(fetchHandler)\r\n            .then(({ response, code }) => {\r\n\r\n                runInAction(() => {\r\n                    this.todoData = this.todoData.map(n => {\r\n                        if (n.id === id) n = response\r\n                        return n\r\n                    })\r\n                })\r\n\r\n                return response\r\n\r\n            }).catch(err => {\r\n               \r\n                runInAction(() => {\r\n                    if (['NO_TOKEN', 'NOT_AUTHENTICATED'].indexOf(err) !== -1) {\r\n                        this.state = \"no_auth\"\r\n                    }         \r\n                })\r\n\r\n                onerror('[fetch_updateBucketStatusPost]', err)\r\n            })\r\n    }\r\n\r\n    fetch_updateBucketOnlyStatus({ status }, id) {\r\n\r\n        debug('[fetch]', api.updateBucketOnlyStatus(id))\r\n        return fetch(api.updateBucketOnlyStatus(id), presetPost({ status })).then(fetchHandler)\r\n            .then(({ response, code }) => {\r\n\r\n                runInAction(() => {\r\n                    this.todoData = this.todoData.map(n => {\r\n                        if (n.id === id) {\r\n                            Object.entries(response).forEach(([k, val]) => {\r\n                                if (n[k]) n[k] = val\r\n                            })\r\n                        }\r\n                        return n\r\n                    })\r\n                })\r\n\r\n                return response\r\n\r\n            }).catch(err => {\r\n           \r\n                runInAction(() => {\r\n                    if (['NO_TOKEN', 'NOT_AUTHENTICATED'].indexOf(err) !== -1) {\r\n                        this.state = \"no_auth\"\r\n                    }         \r\n                })\r\n                onerror('[fetch_updateBucketOnlyStatus]', err)\r\n            })\r\n    }\r\n\r\n    /**\r\n    * fetch update, and reset todoData\r\n    * @param {*} {title}\r\n    * @param {*} todo_id subtask id\r\n    * @memberof MobXStoreAPI\r\n    */\r\n    fetch_updateSubtaskStatusPost({ status }, todo_id) {\r\n        debug('[fetch]', api.updateSubtaskStatus(todo_id))\r\n        return fetch(api.updateSubtaskStatus(todo_id), presetPost({ status })).then(fetchHandler)\r\n            .then(({ response, code }) => {\r\n\r\n                runInAction(() => {\r\n\r\n                    this.todoData = this.todoData.map(n => {\r\n                        if (n.id === todo_id) n = response\r\n                        return n\r\n                    })\r\n                })\r\n\r\n                return response\r\n\r\n            }).catch(err => {\r\n               \r\n                runInAction(() => {\r\n                    if (['NO_TOKEN', 'NOT_AUTHENTICATED'].indexOf(err) !== -1) {\r\n                        this.state = \"no_auth\"\r\n                    }         \r\n                })\r\n\r\n                onerror('[updateSubtaskStatusPost]', err)\r\n            })\r\n    }\r\n\r\n    /**\r\n     * update store and bucket directly without re-rendering component\r\n     * @param {*} response \r\n     * @param {*} id \r\n     */\r\n    _addSubToBucket(response, id) {\r\n        if (this.childstores.bucketStore instanceof BucketStore) {\r\n            this.childstores.bucketStore.todos = this.childstores.bucketStore.todos.map(todo => {\r\n                if (todo.id === id) {\r\n                    if (todo instanceof Bucket) {\r\n                        todo.addSubtask(response)\r\n                    }\r\n                }\r\n                return todo\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * update store and bucket directly without re-rendering component\r\n     * @param {*} response \r\n     * @param {*} id \r\n     */\r\n    _updateBucket(response, id, childStore) {\r\n        if (childStore instanceof BucketStore) {\r\n            childStore.todos = childStore.todos.map(todo => {\r\n                if (todo.id === id) {\r\n                    if (todo instanceof Bucket) {\r\n                        todo = updateTodoValues(response, todo)\r\n\r\n                    }\r\n                }\r\n                return todo\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * update store and subtask directly without re-rendering component\r\n     * @param {*} response \r\n     * @param {*} todo_id \r\n     */\r\n    _updateSubtask(response, todo_id, subTaskStore) {\r\n        if (subTaskStore instanceof BucketStore) {\r\n            subTaskStore.todos = subTaskStore.todos.map(todo => {\r\n                if (todo instanceof Subtask) {\r\n                    if (todo.todo_id === todo_id) {\r\n                        todo.updateSubtask(response)\r\n                    }\r\n                }\r\n                return todo\r\n            })\r\n        }\r\n    }\r\n}\r\n","import { action, observable, makeObservable, observe } from \"mobx\"\r\nimport { log, onerror } from 'x-utils-es'\r\nimport { BucketStore } from '../components/Todos/Models'\r\nimport MobXStoreAPI from './MobxStore.api'\r\nimport { tasksComplete } from '../utils'\r\n\r\nexport default class MobXStore extends MobXStoreAPI {\r\n\r\n    constructor() {\r\n        super()\r\n\r\n        makeObservable(this, {\r\n            todoData: observable,\r\n            state: observable,\r\n            onUpdate: action,\r\n            fetch_bucketListGet: action\r\n        })\r\n\r\n        // NOTE get initial bucket data from server\r\n        this.fetch_bucketListGet()\r\n\r\n        observe(this, 'todoData', change => {\r\n            log(`[todoData][updated]`)\r\n        })\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} data data as object transmitted\r\n     * @param {*} id id that belongs to each entity, except for homeComponent\r\n     * @param {*} entity [homeComponent','bucket','subtask']\r\n     * @param {*} eventName [addBucket ','addSubtask','subtask','inputTitle,statusChange,statusNoChange]\r\n     * @param {*} childStore current store instance during execution, \r\n     */\r\n    async onUpdate(data = {}, id, entity, eventName, childStore, onDone) {\r\n\r\n        let entities = ['homeComponent', 'bucket', 'subtask']\r\n        if (!onDone) onDone = function () { }\r\n\r\n        let doSwitch = async (ent) => {\r\n            let done = {}\r\n            switch (ent) {\r\n                case 'homeComponent': {\r\n\r\n                    // disabled\r\n                    // if (eventName === 'inputTitle') {\r\n                    //  on input type and change set\r\n                    // }\r\n\r\n                    if (eventName === 'addBucket') {\r\n                        let r = await this.addBucket_and_fetch(data)\r\n                        if (r) onDone(true)\r\n                        else {\r\n                            done = {\r\n                                fail: true,\r\n                                message: 'addBucket_and_fetch no completed'\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    break\r\n                }\r\n\r\n                case 'bucket': {\r\n\r\n                    // eslint-disable-next-line no-empty\r\n                    if (eventName === 'statusNoChange') {}\r\n\r\n                    if (eventName === 'statusChange') {\r\n                        let r = await this.fetch_updateBucketStatusPost({ status: data.status }, id)\r\n                        if (r) {\r\n                            this._updateBucket(r, id, childStore)\r\n                        } else {\r\n                            done = {\r\n                                fail: true,\r\n                                message: 'fetch_updateBucketStatusPost not complete'\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    break\r\n                }\r\n\r\n                case 'subtask': {\r\n\r\n                    if (eventName === 'statusChange') {\r\n\r\n                        let r = await this.fetch_updateSubtaskStatusPost({ status: data.status }, id)\r\n                        if (r) {\r\n\r\n                            this._updateSubtask(r, id, childStore)\r\n\r\n                            // when all subtasks are completed/ or still pending, make another fetch and update bucket status to complete\r\n      \r\n                            let bucketID = childStore.id\r\n                            let status = tasksComplete(childStore.todos) ? 'completed' : 'pending'\r\n                            if (!await this.fetch_updateBucketOnlyStatus({ status }, bucketID)) {\r\n                                done = {\r\n                                    fail: true,\r\n                                    message: 'fetch_updateSubtaskStatusPost > fetch_updateBucketOnlyStatus not complete'\r\n                                }\r\n                            }\r\n                            \r\n                            onDone(true)\r\n                        } else {\r\n                            done = {\r\n                                fail: true,\r\n                                message: 'fetch_updateSubtaskStatusPost not complete'\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (eventName === 'addSubtask') {\r\n                        if (await this.addSubtask_and_fetch(data, childStore)) onDone(true)\r\n                        else {\r\n                            done = {\r\n                                fail: true,\r\n                                message: 'addSubtask not complete'\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    break\r\n                }\r\n\r\n                default: {\r\n                    done = {\r\n                        fail: true,\r\n                        message: `no entity matched for: ${entity}`\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!done) {\r\n                done = {\r\n                    pass: true\r\n                }\r\n            }\r\n\r\n            return done\r\n        }\r\n\r\n        for (let ent of entities) {\r\n            if (ent !== entity) continue\r\n            let o = doSwitch(ent)\r\n            if (o) {\r\n                if (o.fail) onerror('[MobXStore][onUpdate]', o.message)\r\n            }\r\n        }\r\n\r\n        log('[MobXStore][onUpdate]', '[data][id][entity][childStore][eventName][?onDone]')\r\n    }\r\n\r\n    /**\r\n     * The store gains access to BucketStore after <BucketComponent/> is loaded\r\n     * @param {*} data \r\n     */\r\n    async addBucket_and_fetch({ title }) {\r\n\r\n        await this.childStoresAvailable.bucketStore.promise\r\n        if (this.childstores.bucketStore instanceof BucketStore) {\r\n            // execute bucketStore addNewBucket\r\n            // wait for server response \r\n            // perform lazy callback    \r\n            let bucketItem = this.childstores.bucketStore.addNewBucket({ title }, ({ title }) => {\r\n                return this.fetch_createBucketPost({ title }).then(n => {\r\n                    if (!n) return Promise.reject('addBucket,No data available')\r\n                    else return n\r\n                }).catch(onerror)\r\n            })\r\n            return bucketItem\r\n        }\r\n        return false\r\n    }\r\n\r\n    /**\r\n    * The store gains access to SubtaskStore after <BucketSubTasks/> is loaded\r\n    * @param {*} data \r\n    */\r\n    async addSubtask_and_fetch({ title }, childStore) {\r\n     \r\n        // just a reminder, we are using same class for both {BucketStore} and {subTaskStore}\r\n        // the only difference is the {entity}\r\n       \r\n        if (childStore instanceof BucketStore && childStore.entity === 'SubTaskStore') {\r\n\r\n            // execute subTaskStore addNewSubTask\r\n            // wait for server response \r\n            // perform lazy callback    \r\n            const bucketId = childStore.id\r\n\r\n            let subtaskItem = childStore.addNewSubTask({ title }, ({ title }) => {\r\n                \r\n                return this.fetch_createSubtaskPost({ title }, bucketId).then(n => {\r\n                    if (!n) return Promise.reject('addSubtask, No data available')\r\n                    else return n\r\n                }).catch(onerror)\r\n            })\r\n\r\n            return subtaskItem\r\n        }\r\n        return false\r\n    }\r\n\r\n}\r\n","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport { delay } from 'x-utils-es/umd'\r\nimport Chip from '@material-ui/core/Chip'\r\nimport TagFacesIcon from '@material-ui/icons/TagFaces'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2)\r\n    },\r\n    title: {\r\n        flexGrow: 1\r\n    }\r\n}))\r\n\r\nfunction ButtonAppBar({ mobxstore }) {\r\n\r\n    const [userName, setUser] = React.useState('')\r\n\r\n    // assign fake user \r\n    const defaultUser = 'Johndoe'\r\n    delay(3000).then(() => {\r\n        setUser(defaultUser)\r\n    })\r\n  \r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n            Bucket List\r\n                    </Typography>\r\n                    {userName && mobxstore.state === 'ready' ? (<Chip\r\n                        avatar={<TagFacesIcon />}\r\n                        className=\"nav-avatar\"\r\n                        label={userName}\r\n                        clickable\r\n                        variant=\"outlined\"\r\n                    />) : null}\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ButtonAppBar\r\n","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Alert from '@material-ui/lab/Alert'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        '& > * + *': {\r\n            marginTop: theme.spacing(2)\r\n        }\r\n    }\r\n}))\r\n\r\n/**\r\n *  `<Message type='' value=''/>`  types: [error,info,success]\r\n * display message based on props\r\n * @param {*} props //type,value \r\n */\r\nexport default function Messages(props) {\r\n    const classes = useStyles()\r\n    const type = props.type\r\n    const message = props.value\r\n\r\n    if (!message) return null\r\n    return (\r\n        <div className={classes.root + ' mx-1'}>\r\n            {type === 'error' ? (<Alert severity=\"error\">{message}</Alert>) : type === 'warning' ? (<Alert severity=\"warning\">{message}</Alert>)\r\n                : type === 'info' ? (<Alert severity=\"info\">{message}</Alert>)\r\n                    : type === 'success' ? (<Alert severity=\"success\">{message}</Alert>) : null}  \r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport { observer } from \"mobx-react-lite\"\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport Message from './Messages'\r\nimport { Redirect } from \"react-router-dom\"\r\nconst withStoreReady = (Component) => {\r\n    \r\n    const Hoc = observer(({ mobxstore, basename }) => {\r\n    \r\n        if (mobxstore.state === 'no_auth') return (<Redirect to=\"/session-expired\"/>) \r\n        if (mobxstore.state === 'error') return (<Message type='error' value='No data from server' />) \r\n        if (mobxstore.state === 'ready') return (<Component mobxstore={mobxstore} />)\r\n        else return (<div className=\"d-flex justify-content-center align-items-center m-5 p-2\"><CircularProgress color=\"inherit\" size={20} /></div>)\r\n    })\r\n    return Hoc\r\n}\r\n\r\nexport default withStoreReady\r\n","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Fab from '@material-ui/core/Fab'\r\nimport AddIcon from '@material-ui/icons/Add'\r\n\r\nconst useStyles = (opts = {}) => makeStyles((theme) => {\r\n    let o = {\r\n        root: {\r\n   \r\n            '& > *': {\r\n                margin: theme.spacing(1)\r\n            },\r\n            ...(opts.style ? opts.style : {}),\r\n            backgroundColor: theme.palette.background.paper\r\n        },\r\n        extendedIcon: {\r\n            marginRight: theme.spacing(1)\r\n        }\r\n    }\r\n    return o\r\n})()\r\n\r\nexport default function FloatingActionButtons({ actionAdd, style }) {\r\n    const classes = useStyles({ style })\r\n    const onClick = (event) => {\r\n        if (actionAdd) actionAdd() \r\n        event.stopPropagation()\r\n        event.preventDefault()\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Fab color=\"primary\" aria-label=\"add\">\r\n                <AddIcon onClick={onClick} />\r\n            </Fab>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Add from './Add'\r\nimport { warn } from 'x-utils-es'\r\nconst useStyles = (opts = {}) => makeStyles((theme) => {\r\n    let o = {\r\n        root: {\r\n            backgroundColor: theme.palette.background.paper,\r\n            '& > *': {\r\n                margin: theme.spacing(1),\r\n                width: '25ch'\r\n            },\r\n            '& .outlined-basic.form-control': {\r\n                background: 'transparent'\r\n            },\r\n            ...(opts.style ? opts.style : {})\r\n        }\r\n    }\r\n    return o\r\n})()\r\n\r\nexport default function BasicTextFields({ className, entity, add, childStore, text, style, variantName = \"outlined\", value, onUpdate, id }) {\r\n\r\n    const classes = useStyles({ style })\r\n    const [inputName, setInputName] = React.useState('')\r\n\r\n    return (\r\n        <form\r\n\r\n            value={inputName}\r\n            onChange={(event) => {\r\n                let value = (event.target.value || '')\r\n       \r\n                if (onUpdate) {\r\n                    \r\n                    // NOTE disable for now\r\n                    // onUpdate({ value }, id, entity, 'inputTitle', childStore, () => {\r\n                    // }) \r\n                }\r\n                setInputName(value)\r\n          \r\n            }}\r\n\r\n            onSubmit={(event) => {      \r\n                let eventName = entity === 'subtask' ? 'addSubtask' : 'addBucket'\r\n\r\n                if ((inputName || '').length > 1) {\r\n                    onUpdate({ title: inputName }, id, entity, eventName, childStore, () => {\r\n                        setInputName('')\r\n                    })\r\n                } else {\r\n                    warn('[Input]', 'title is too short')\r\n                }\r\n    \r\n                event.stopPropagation()\r\n                event.preventDefault()\r\n                return false\r\n            }}\r\n\r\n            className={classes.root + \" \" + className} noValidate autoComplete=\"off\">\r\n\r\n            <React.Fragment>\r\n                {add ? (\r\n                    <div className=\"input-group mb-3 mr-1\">\r\n                        <TextField\r\n                            value={inputName}\r\n                            className=\"outlined-basic form-control \" label={text} variant={variantName} />\r\n                        <Add\r\n\r\n                            actionAdd={() => {\r\n\r\n                                let eventName = entity === 'subtask' ? 'addSubtask' : 'addBucket'\r\n                                if ((inputName || '').length > 1) {\r\n                                    onUpdate({ title: inputName }, id, entity, eventName, childStore, () => {\r\n                                        setInputName('')\r\n                                    })\r\n                                } else {\r\n                                    warn('[Input]', 'title is too short')\r\n                                }\r\n                              \r\n                            }}\r\n\r\n                            style={\r\n                                {\r\n                                    '& .MuiFab-root': {\r\n                                        width: '34px',\r\n                                        height: '34px'\r\n\r\n                                    }\r\n                                }\r\n                            } />\r\n                    </div>\r\n                ) : (<TextField\r\n                    value={inputName}\r\n                    className=\"outlined-basic\"\r\n                    label={text}\r\n                    variant={variantName} />)}\r\n            </React.Fragment>\r\n\r\n        </form>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Accordion from '@material-ui/core/Accordion'\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary'\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%'\r\n    },\r\n    heading: {\r\n        fontSize: theme.typography.pxToRem(15),\r\n        flexBasis: '85%',\r\n        margin: '0px',\r\n        flexShrink: 0\r\n    },\r\n    secondaryHeading: {\r\n        fontSize: 'smaller',\r\n        paddingTop: '0.75rem!important',\r\n        color: theme.palette.text.secondary,\r\n        flexShrink: 0,\r\n        flexBasis: '15%'\r\n    }\r\n}))\r\n\r\nexport default function AccordionSection({ SubTasks, Check, item, finishedCount }) {\r\n\r\n    const classes = useStyles()\r\n    return (<div className={classes.root}>\r\n        <Accordion className=\"px-2 mb-2 accordion-wrap\">\r\n            <AccordionSummary\r\n                expandIcon={<ExpandMoreIcon />}\r\n                aria-label=\"Expand\"\r\n                aria-controls=\"additional-actions1-content\"\r\n                id=\"additional-actions1-header\">\r\n\r\n                <FormControlLabel\r\n                    className={classes.heading}\r\n                    aria-label=\"Acknowledge\"\r\n                    onClick={(event) => event.stopPropagation()}\r\n                    onFocus={(event) => event.stopPropagation()}\r\n                    control={\r\n                        <Check />\r\n                    }\r\n                    label={item.title}\r\n                />\r\n                <Typography className={classes.secondaryHeading}>Done {finishedCount}/{item.subtasks.length} </Typography>\r\n\r\n            </AccordionSummary>\r\n\r\n            <AccordionDetails>\r\n\r\n                <React.Fragment>\r\n                    {SubTasks ? <SubTasks /> : 'no details as yet'}\r\n                </React.Fragment>\r\n\r\n            </AccordionDetails>\r\n        </Accordion>\r\n    </div>)\r\n}\r\n","\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport React from 'react'\r\nimport { observer } from \"mobx-react-lite\"\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport { BucketStore as SubTaskStore } from './Models'\r\nimport Input from '../Input'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        backgroundColor: theme.palette.background.paper\r\n    }\r\n}))\r\n\r\nconst SubTaskView = observer(({ todo, inx, onUpdate, subTaskStore, currentCount, onCurrentCount }) => {\r\n\r\n    // callback to <BucketView/>\r\n    const [didLoad, setDidLoad] = React.useState(false)\r\n    React.useEffect(() => {\r\n        if (!didLoad) {\r\n            currentCount(subTaskStore.finishedCount)\r\n            setDidLoad(true)\r\n        }\r\n    }, [didLoad, currentCount, subTaskStore.finishedCount])\r\n\r\n    const labelId = `subtask-item checkbox-list-label-${inx}`\r\n    return (<ListItem\r\n\r\n        key={todo.todo_id}\r\n        role={undefined} dense button\r\n        onClick={(e => {\r\n            todo.toggle()\r\n            onUpdate(todo, todo.todo_id, 'subtask', 'statusChange', subTaskStore) // hoc call to Bucket\r\n            onCurrentCount() // execute change only\r\n            e.stopPropagation()\r\n        })}>\r\n        <ListItemIcon>\r\n            <Checkbox\r\n                edge=\"start\"\r\n                checked={todo.finished}\r\n                tabIndex={-1}\r\n                inputProps={{ 'aria-labelledby': labelId }}\r\n            />\r\n        </ListItemIcon>\r\n        <ListItemText id={labelId} primary={todo.title} />\r\n    </ListItem>)\r\n})\r\n\r\nconst SubTasksListView = observer(({ subTaskStore, inx, onUpdate, currentCount, onCurrentCount }) => {\r\n\r\n    const classes = useStyles()\r\n    return (<List className={classes.root + ` m-auto subtask-list`}>\r\n        {subTaskStore.todos.map(todo => (\r\n            <SubTaskView onCurrentCount={onCurrentCount} currentCount={currentCount} todo={todo} key={todo.todo_id} inx={inx} onUpdate={onUpdate} subTaskStore={subTaskStore} />\r\n        ))}\r\n\r\n        <div className=\"d-flex justify-content-between align-items-center flex-row subtask-item\">\r\n\r\n            <Input variantName='standard'\r\n                text='Add Task'\r\n                style={{ \"& input\": { padding: \"3px 0 5px\" } }}\r\n                id={subTaskStore.id}\r\n                entity='subtask'\r\n                childStore={subTaskStore}\r\n                onUpdate={onUpdate} // we need to handle add new update events as well\r\n                add={true} // tells the input to add <Add/> component\r\n            />\r\n        </div>\r\n\r\n    </List>)\r\n})\r\n\r\nconst SubtaskComponent = (props) => {\r\n    const { subtasks, id, onUpdate, onCurrentCount, currentCount } = props\r\n    const subTaskStore = new SubTaskStore(subtasks || [], { id, entity: 'SubTaskStore' })\r\n    return (<SubTasksListView currentCount={currentCount} onCurrentCount={() => onCurrentCount(subTaskStore.finishedCount)} subTaskStore={subTaskStore} onUpdate={onUpdate} />)\r\n}\r\n\r\nexport default SubtaskComponent\r\n","\r\nimport React from \"react\"\r\nimport { observer } from \"mobx-react-lite\"\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport { BucketStore } from './Models'\r\nimport Button from '@material-ui/core/Button'\r\nimport Box from '@material-ui/core/Box'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Accordion from './Accordion'\r\nimport List from '@material-ui/core/List'\r\n\r\n// import { todoList as todoData } from '../../store/dummy.data' //NOTE initial dummy data\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport BucketSubTasks from './BucketSubtasks'\r\nimport Message from '../Messages'\r\nimport { purgeDatabase } from '../../utils/utils'\r\nimport { delay } from \"x-utils-es/umd\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        // maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper\r\n    }\r\n}))\r\n// <CircularProgress color=\"inherit\" size={20} />\r\nconst BucketView = observer(({ todo, onUpdate, mobxstore, bucketStore }) => {\r\n    // eslint-disable-next-line no-empty\r\n    if (!todo.finished === false) { } // hack fix\r\n\r\n    // get subtasks completion count\r\n    const [finishedCount, setCount] = React.useState(0)\r\n \r\n    const currentCount = (count) => setCount(count)\r\n\r\n    return (\r\n        <div className=\"d-flex justify-content-center m-auto px-3 py-2 bucket-item\">\r\n            <Accordion\r\n                Check={() => (\r\n                    <Checkbox\r\n                        onClick={(e) => {                         \r\n                            let status = todo.toggle() ? 'completed' : 'pending'\r\n                            let buck = bucketStore.taskByID(todo.id)\r\n                            // dont emit same event when we dont have any subtasks to perform\r\n                            let eventName = buck.subtasks.length ? 'statusChange' : 'statusNoChange'\r\n                            onUpdate({ status }, todo.id, 'bucket', eventName, bucketStore)\r\n\r\n                            e.stopPropagation()\r\n                        }}\r\n                        checked={todo.finished}\r\n                        edge=\"start\"\r\n                    />\r\n                )}\r\n\r\n                item={todo}\r\n                finishedCount={finishedCount}        \r\n                SubTasks={() => (<BucketSubTasks onCurrentCount={currentCount} currentCount={(count) => currentCount(count)} mobxstore={mobxstore} subtasks={todo.subtasks || []} id={todo.id} onUpdate={(data, id, entity, eventName, childStore, onDone) => {\r\n     \r\n                    todo.onUpdate(data, entity, eventName)\r\n                    onUpdate(data, id, 'subtask', eventName, childStore, onDone)\r\n                   \r\n                }} />)}\r\n            />\r\n        </div>\r\n    )\r\n})\r\n\r\nconst BucketListView = observer(({ bucketStore, mobxstore, onUpdate }) => {\r\n    const [deleted, setDelete] = React.useState(0)\r\n    const classes = useStyles()\r\n    return (<><List className={classes.root + ` m-auto bucket-list`}>\r\n        {(bucketStore.todos || []).length ? bucketStore.todos.map(todo => (\r\n            <BucketView todo={todo} key={todo.id} onUpdate={onUpdate} mobxstore={mobxstore} bucketStore={bucketStore} />\r\n        )) : <Message type='info' value='Add a new bucket list :)'/> }\r\n\r\n        { ((bucketStore.todos || []).length && bucketStore.unfinishedCount)\r\n            ? (<Message type='info' value={'Tasks left: ' + bucketStore.unfinishedCount}/>) : ((bucketStore.todos || []).length && !bucketStore.unfinishedCount) ? (<Message type='success' value='All done!'/>) : null\r\n        }\r\n    </List><Box style={{ width: '100%', textAlign: 'center', opacity: '40%' }}><Button disabled={deleted === 1} onClick={() => {\r\n        setDelete(1)\r\n        purgeDatabase().then(n => {\r\n            setDelete(2)\r\n            delay(1000).then(n => {\r\n                window.location.reload()\r\n            })\r\n           \r\n        }).catch(n => {\r\n            setDelete(0)\r\n        })\r\n    }} color=\"error\" variant=\"outlined\" size=\"small\" style={{ color: 'red', border: '1px solid red' }} >  {deleted === 1 ? <CircularProgress color=\"inherit\" size={20} /> : 'Delete list' }</Button></Box></>)\r\n})\r\n\r\nconst BucketComponent = (props) => {\r\n    const { mobxstore, onUpdate } = props\r\n\r\n    if (mobxstore.state === 'ready') {\r\n\r\n        // NOTE adding store dataList to each Bucket model via BucketStore\r\n        const bucketStore = new BucketStore(mobxstore.todoData || [], { entity: 'BucketStore' })\r\n        mobxstore.childstores.bucketStore = bucketStore\r\n        mobxstore.childStoresAvailable.bucketStore.resolve(true)\r\n\r\n        if (bucketStore.state === 'ready') {\r\n            return (<BucketListView bucketStore={bucketStore} mobxstore={props.mobxstore} onUpdate={onUpdate} />)\r\n        }\r\n\r\n        if (bucketStore.state === 'error') {\r\n            return (<Message type='error' value='No data for Bucket Store' />)\r\n        } else {\r\n            return (<CircularProgress color=\"inherit\" size={20} />)\r\n        }\r\n    } else return (<CircularProgress color=\"inherit\" size={20} />)\r\n}\r\n\r\nexport default BucketComponent\r\n","\nimport \"../theme/scss/pages/home.component.scss\"\nimport withStoreReady from '../components/withStore.hoc'\nimport React from 'react'\nimport Input from '../components/Input'\nimport BucketTodo from '../components/Todos/BucketTodo'\n\nfunction Home(props) {\n    const { mobxstore } = props \n\n    const storeOnUpdateHandler = (data, id, entity, eventName, childStore, onDone) => {\n        mobxstore.onUpdate(data, id, entity, eventName, childStore, onDone)\n    }\n\n    return (\n        <>\n            <div className=\"row\">\n                <div className=\"col-sm-12 col-md-8 m-auto bucket-wrap \">\n                    <div className=\"d-flex justify-content-center align-items-center m-auto\">\n                        <Input\n                            className='bucket-add-input'\n                            variantName='outlined' text='New bucket' \n                            entity='homeComponent'\n                            childStore={null}\n                            onUpdate={storeOnUpdateHandler}\n                            add={ true }\n                        />\n   \n                    </div>\n                </div>\n            </div>\n\n            <div className=\"row\">\n                <div className=\"col-sm-12 col-md-7 m-auto p-4\">\n                    <BucketTodo mobxstore={mobxstore} onUpdate={storeOnUpdateHandler}/>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default withStoreReady(Home)\n","import React from \"react\"\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\"\nimport { theme } from \"../src/theme/material.theme\"\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport MobXStore from './store/MobxStore'\nimport Navbar from \"./components/Navbar\"\nimport Home from \"./pages/Home\"\nimport Message from './components/Messages'\nimport { loggerSetting, log } from 'x-utils-es'\nif (process.env.REACT_APP_ENV === 'production') {\n    loggerSetting('log', 'off')\n    loggerSetting('debug', 'off')\n}\n\nif (process.env.REACT_APP_ENV === 'development') {\n    log('IN_DEVELOPMENT_MODE')\n}\n\nconst mobxstore = new MobXStore()\nfunction App() {\n    const basename = process.env.PUBLIC_URL + '/app/'\n    return (\n        <BrowserRouter basename={basename} >\n\n            <ThemeProvider theme={theme}>\n                <Navbar mobxstore={mobxstore} />\n                <div className=\"container-fluid mt-3\">\n\n                    <Switch>\n                        <Route exact path=\"/app\">\n                            <Redirect to=\"/profile/johndoe\"/>\n                        </Route>\n                    </Switch>\n\n                    <Switch>\n                        <Route exact path=\"/\" render={(props) => (\n                            <Redirect to=\"/profile/johndoe\"/>\n                        )}/>\n      \n                    </Switch>\n\n                    <Switch>\n                        <Route path=\"/profile/:user\">\n                            <Home mobxstore={mobxstore} />\n                        </Route>\n                    </Switch>\n          \n                    <Switch>\n                        <Route exact path=\"/error\" render={(props) => {          \n                            return (<Message type='error' value='Ups something went wrong' />)\n                        }}/>                  \n                    </Switch>\n\n                    <Switch>\n                        <Route exact path=\"/session-expired\" render={(props) => {          \n                            return (<Message type='error' value='Your token expired, please login again at: /login' />)\n                        }}/>                  \n                    </Switch>\n                        \n                    <Switch>\n                        <Route exact path=\"*\">\n                            <Redirect to=\"/profile/johndoe\"/>\n                        </Route>\n                    </Switch>\n                </div>\n\n            </ThemeProvider>\n        </BrowserRouter>\n    )\n}\n\nexport default App\n\n/*\n<Switch>\n  <Layout exact path=\"/hotel/:agency\" component={Home} />\n  <Layout exact path=\"/hotel/:agency/list\" component={List} />\n  <Layout exact path=\"/hotel/:agency/detail/:id\" component={Detail} />\n\n</Switch>\n* */\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"../src/theme/scss/styles.scss\" // < base theme\nimport App from \"./App\"\n\nReactDOM.render(\n\n    <App />,\n    document.getElementById(\"root\")\n)\n"],"sourceRoot":""}